name: pipeline-ios-test

on:
  push:
    branches:
      - main

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Ler variáveis do arquivo
        id: vars
        run: |
          echo "VAR_1=$(grep 'VAR_1:' variables.yml | cut -d' ' -f2 | tr -d '\"')" >> $GITHUB_ENV
          echo "VAR_2=$(grep 'VAR_2:' variables.yml | cut -d' ' -f2 | tr -d '\"')" >> $GITHUB_ENV
          echo "VAR_3=$(grep 'VAR_3:' variables.yml | cut -d' ' -f2 | tr -d '\"')" >> $GITHUB_ENV
          echo "VAR_4=$(grep 'VAR_4:' variables.yml | cut -d' ' -f2 | tr -d '\"')" >> $GITHUB_ENV
          echo "VAR_5=$(grep 'VAR_5:' variables.yml | cut -d' ' -f2 | tr -d '\"')" >> $GITHUB_ENV
          echo "VAR_6=$(grep 'VAR_6:' variables.yml | cut -d' ' -f2 | tr -d '\"')" >> $GITHUB_ENV
          echo "VAR_7=$(grep 'VAR_7:' variables.yml | cut -d' ' -f2 | tr -d '\"')" >> $GITHUB_ENV
          echo "VAR_8=$(grep 'VAR_8:' variables.yml | cut -d' ' -f2 | tr -d '\"')" >> $GITHUB_ENV
          echo "VAR_9=$(grep 'VAR_9:' variables.yml | cut -d' ' -f2 | tr -d '\"')" >> $GITHUB_ENV
          echo "VAR_10=$(grep 'VAR_10:' variables.yml | cut -d' ' -f2 | tr -d '\"')" >> $GITHUB_ENV

  build:
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Exibir variáveis
        run: |
          echo "VAR_1: $VAR_1"
          echo "VAR_2: $VAR_2"
          echo "VAR_3: $VAR_3"
          echo "VAR_4: $VAR_4"
          echo "VAR_5: $VAR_5"
          echo "VAR_6: $VAR_6"
          echo "VAR_7: $VAR_7"
          echo "VAR_8: $VAR_8"
          echo "VAR_9: $VAR_9"
          echo "VAR_10: $VAR_10"
# on:
#   # workflow_dispatch:
#   push:
#     branches:
#       - main
#     # pull_request:
#   #   branches:
#   #     main
# # env:
# #   # Carrega todas as variáveis do grupo 'dev' por padrão
# #   ${{ fromJSON(include('variables2.yml'))['variables'] }}
# #   ${{ fromJson()}}

# jobs:
#   init:
#     runs-on: macos-latest
#     steps:
#       - name: checkout code
#         uses: actions/checkout@v2

#       - id: step1
#         name: set vars
#         run: |
#           IFS=$'\n'
#           for vars in $(yq e '.variables[] | .name + "=" + .value' variables/variables.yml); do
#             echo "$vars"
#             echo "$vars" >> $GITHUB_OUTPUT
#           done

#         # run: echo "test=Hello world" >> $GITHUB_OUTPUT

#       - run: |
#           echo "VAR_01 --> ${{ steps.step1.outputs.MY_VAR_01 }}"
#           echo "VAR_02 --> ${{ steps.step1.outputs.MY_VAR_02 }}"
#           echo "VAR_03 --> ${{ steps.step1.outputs.MY_VAR_03 }}"
#           echo "VAR_04 --> ${{ steps.step1.outputs.MY_VAR_04 }}"


  # build:
  #   runs-on: macos-latest
  #   needs: init
  #   steps:
  #     - name: build
  #       run: |
  #         echo "${{ env.VAR_01 }}"
  #         echo "VAR_01 --> ${{ steps.step1.outputs.MY_VAR_01 }}"





      # echo "${{ steps.step1.outputs.test }}"

    # - name: Show variables
    #   run: |
    #     echo "------------------------------------------------------------"
    #     echo "MY_VAR_01: ${{ env.MY_VAR_01 }}"
    #     echo "MY_VAR_02: ${{ env.MY_VAR_02 }}"
    #     echo "MY_VAR_03: ${{ env.MY_VAR_03 }}"
    #     echo "MY_VAR_04: ${{ env.MY_VAR_04 }}"



    # - uses: ricardoysh/pipe-ios
    #   with:
    #     org: ricardoysh
    #     repo: pipe-ios/variables/variables.yml
    #     groups: |
    #       ricardoysh/pipe-ios/variables/variables.yml
    # - name: print variables
    #   run: |
    #     env | sort

      # - name: checkout code
      #   uses: actions/checkout@v2

      # # - name: install yq
      # #   run: jq --version

      # - name: check dependencies
      #   run: |
      #     echo "Verificando as ferramentas necessárias:"
      #     echo "---------------------------------"
      #     xcodebuild -version
      #     # xcodebuild -help
      #     echo "---------------------------------"
      #     pod --version
      #     echo "---------------------------------"
      #     fastlane -v
      #     echo "---------------------------------"
      #     gem -v
      #     echo "---------------------------------"
      #     node -v
      #     echo "---------------------------------"

      #     echo "-------------- **fim** --------------"

      # - name: Load variables
      #   run: |
      #     IFS=$'\n'
      #     for vars in $(yq e '.variables[] | .name + "=" + .value' variables/variables.yml); do
      #       echo "$vars"
      #       echo "$vars" >> $GITHUB_ENV
      #     done

      # # - name: debug msgs
      # #   run: |
          
      # #     echo "::notice::Missing semicolon"
      # #     echo "::warning::Missing semicolon"
      # #     echo "::error::Missing semicolon"
      # #     echo "::debug::Missing semicolon"



      # #     echo "::notice file=app.js,line=1,col=5,endColumn=7::Missing semicolon"
      # #     echo "::warning file=app.js,line=1,col=5,endColumn=7,title=YOUR-TITLE::Missing semicolon"
      # #     echo "::error file=app.js,line=1,col=5,endColumn=7,title=YOUR-TITLE::Missing semicolon"

      # # - name: Set environment variable
      # #   run: echo "MY_ENV_VAR=myValue" >> $GITHUB_ENV
  
      # - name: Use environment variable
      #   run: |
      #     echo "Recuperando variáveis do projeto..."
      #     echo "-----------------------------------------"
      #     # echo "The value of MY_ENV_VAR is $MY_ENV_VAR"
      #     echo "VAR1 -----> $MY_VAR_01"
      #     echo "VAR2 -----> $MY_VAR_02"
      #     echo "VAR3 -----> $MY_VAR_03"
      #     echo "VAR4 -----> $MY_VAR_04"
      #     echo "VAR_WEB --> $MY_VAR_WEB1"
      #     echo "MY_VAR_WEB5 ----> $MY_VAR_WEB5"
      #     echo "VAR_SPACE_01 ---> $VAR_SPACE_01"
      #     echo "VAR_SPACE_02 ---> $VAR_SPACE_02"
      #     echo "VAR_SPACE_03 ---> $VAR_SPACE_03"
        

      # - name: check ambient
      #   run: |
      #     # echo $GITHUB_REF
      #     # echo ${{github.ref}}
      #     if [[ $GITHUB_REF == "refs/heads/main" || "refs/heads/master" ]]; then
      #       echo "Identificado -------> AMBIENTE DE PRODUCAO"
      #     elif [[ $GITHUB_REF == "refs/heads/release" ]]; then
      #       echo "Identificado -------> AMBIENTE DE HOMOLOGACAO"
      #     elif [[ $GITHUB_REF == "refs/heads/develop" ]]; then
      #       echo "Identificado -------> AMBIENTE DE DESENVOLVIMENTO"
      #     fi
      
      # - name: build-producao
      #   if: github.ref == 'refs/heads/main'
      #   run: |
      #     echo "build production"
      
      # - name: build-homologacao
      #   if: github.ref == 'refs/heads/release'
      #   run: |
      #     echo "build homologation"
      # - name: build-develop
      #   if: github.ref == 'refs/heads/develop'
      #   run: |
      #     echo "build development"
 
      # - name: get secret
      #   env:
      #     MY_SECRET: ${{ secrets.MY_SECRET_NAME }}"
      #     MY_PASS: ${{ secrets.SECRET_PASS }}"
      #   run: |
      #     echo "MY_SECRET:$MY_SECRET"
      #     echo "MY_PASS:$MY_PASS"

  
  ## build da aplicacao ##
  # build:
  #   name: build-ios
  #   needs: [init]
  #   uses: ricardoysh/pipeline-core/.github/workflows/build-ios.yml@main
  # ## escaneamento de cod com sonar ##        
  # sonar:
  #   name: run sonar scan
  #   needs: [build]
  #   uses: ricardoysh/pipeline-core/.github/workflows/sonar-ios.yml@main
  # ## ofuscacao de codigo ##
  # obfuscate:
  #   name: run obfuscate code
  #   needs: [sonar]
  #   uses: ricardoysh/pipeline-core/.github/workflows/obfuscate-ios.yml@main

  # approve:
  #   runs-on: ubuntu-latest
  #   needs: [obfuscate]
  #   steps:
  #     - name: Wait for approval
  #       uses: hmarr/approve-action@v2
  # teste
  
  # releae-app:
  #   name: release ios app
  #   needs: [obfuscate]
  #   uses: ricardoysh/pipeline-core/.github/workflows/release-ios.yml@main
